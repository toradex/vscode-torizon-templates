# ARGUMENTS --------------------------------------------------------------------
##
# Board architecture
##
ARG IMAGE_ARCH=
# For armv7 use:
#ARG IMAGE_ARCH=arm

##
# Base container version
##
ARG BASE_VERSION=3-bookworm

##
# Application Name
##
ARG APP_EXECUTABLE=__change__

##
# Debug port
##
ARG SSH_DEBUG_PORT=

##
# Run as
##
ARG SSHUSERNAME=

##
# Board GPU vendor prefix
##
ARG GPU=

# BUILD ------------------------------------------------------------------------
##
# Deploy Step
##
FROM --platform=linux/${IMAGE_ARCH} \
	torizon/wayland-base${GPU}:${BASE_VERSION} AS Debug

ARG IMAGE_ARCH
ARG GPU
ARG SSH_DEBUG_PORT
ARG APP_EXECUTABLE
ARG SSHUSERNAME
ENV APP_EXECUTABLE ${APP_EXECUTABLE}

# SSH for remote debug
EXPOSE ${SSH_DEBUG_PORT}
EXPOSE 9229

# WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile
WORKDIR /app

# Make sure we don't get notifications we can't answer during building.
ENV DEBIAN_FRONTEND="noninteractive"

# for vivante GPU we need some "special" sauce
RUN apt-get -q -y update && \
	if [ "${GPU}" = "-vivante" ]; then \
	apt-get -q -y install \
	imx-gpu-viv-wayland-dev \
	; else \
	apt-get -q -y install \
	libgl1 \
	; fi \
	&& \
	apt-get clean && apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

# your regular RUN statements here
# Install required packages
RUN apt-get -q -y update && \
	apt-get -q -y install \
	gcc \
	g++ \
	make \
	openssl \
	openssh-server \
	rsync \
	file \
	curl \
	&& \
	apt-get clean && apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

# automate for torizonPackages.json
RUN apt-get -q -y update && \
	apt-get -q -y install \
	# DOES NOT REMOVE THIS LABEL: this is used for VS Code automation
	# __torizon_packages_dev_start__
	# __torizon_packages_dev_end__
	# DOES NOT REMOVE THIS LABEL: this is used for VS Code automation
	&& \
	apt-get clean && apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

# install the node.js v18
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
	apt-get install -y nodejs

RUN npm config set registry https://registry.npmjs.org/

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json ./
RUN npm install --target_arch=${IMAGE_ARCH}

# Next.js port
EXPOSE 3000
ENV PORT 3000

# ⚠️ DEBUG PURPOSES ONLY!!
# copies RSA key to enable SSH login for user
COPY .conf/id_rsa.pub /id_rsa.pub

# create folders needed for the different components
# configures SSH access to the container and sets environment by default
RUN mkdir /var/run/sshd && \
	sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' \
	-i /etc/pam.d/sshd && \
	if test $SSHUSERNAME != root ; \
	then mkdir -p /home/$SSHUSERNAME/.ssh ; \
	else mkdir -p /root/.ssh ; fi && \
	if test $SSHUSERNAME != root ; \
	then cp /id_rsa.pub /home/$SSHUSERNAME/.ssh/authorized_keys ; \
	else cp /id_rsa.pub /root/.ssh/authorized_keys ; fi && \
	echo "PermitUserEnvironment yes" >> /etc/ssh/sshd_config && \
	echo "Port ${SSH_DEBUG_PORT}" >> /etc/ssh/sshd_config && \
	su -c "env" $SSHUSERNAME > /etc/environment

RUN rm -r /etc/ssh/ssh*key && \
	dpkg-reconfigure openssh-server

CMD [ "/usr/sbin/sshd", "-D" ]