# ARGUMENTS --------------------------------------------------------------------
##
# Board architecture
##
ARG IMAGE_ARCH=

##
# Base container version
##
ARG BASE_VERSION=4.0.0


##
# Debug port
##
ARG DEBUG_SSH_PORT=

##
# Run as
##
ARG SSHUSERNAME=

##
# Application root directory inside the container
##
ARG APP_ROOT=

# BUILD ------------------------------------------------------------------------
##
# Deploy Step
##
FROM --platform=linux/${IMAGE_ARCH} \
    torizon/debian:${BASE_VERSION} AS debug

ARG IMAGE_ARCH
ARG DEBUG_SSH_PORT
ARG SSHUSERNAME
ARG APP_ROOT

# SSH for remote debug
EXPOSE ${DEBUG_SSH_PORT}
EXPOSE 9229

# Make sure we don't get notifications we can't answer during building.
ENV DEBIAN_FRONTEND="noninteractive"


# your regular RUN statements here


# Install required packages
RUN apt-get -q -y update && \
    apt-get -q -y install \
    gcc \
    g++ \
    make \
    openssl \
    openssh-server \
    rsync \
    file \
    curl && \
    apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# install the latest
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

# install npm and typescript
RUN npm config set registry https://registry.npmjs.org/
RUN npm install -g typescript
RUN npm install -g ts-node

# automate for torizonPackages.json
RUN apt-get -q -y update && \
    apt-get -q -y install \
# DO NOT REMOVE THIS LABEL: this is used for VS Code automation
    # __torizon_packages_dev_start__
    # __torizon_packages_dev_end__
# DO NOT REMOVE THIS LABEL: this is used for VS Code automation
    && \
    apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*


# ⚠️ DEBUG PURPOSES ONLY!!
# THIS CONFIGURES AN INSECURE SSH CONNECTION

# create folders needed for the different components
# configures SSH access to the container and sets environment by default
RUN mkdir /var/run/sshd && \
    sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' \
        -i /etc/pam.d/sshd && \
    if test $SSHUSERNAME != root ; \
        then mkdir -p /home/$SSHUSERNAME/.ssh ; \
        else mkdir -p /root/.ssh ; fi && \
    echo "PermitUserEnvironment yes" >> /etc/ssh/sshd_config && \
    echo "PermitRootLogin yes" >> /etc/ssh/sshd_config && \
    echo "Port ${DEBUG_SSH_PORT}" >> /etc/ssh/sshd_config && \
    echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config && \
    echo "PermitEmptyPasswords yes" >> /etc/ssh/sshd_config && \
    su -c "env" $SSHUSERNAME > /etc/environment && \
    echo "$SSHUSERNAME:" | chpasswd -e

RUN rm -r /etc/ssh/ssh*key && \
    dpkg-reconfigure openssh-server

# Copy the compiled application to the $APP_ROOT directory path inside the
# container, where $APP_ROOT is the torizon_app_root configuration defined
# in settings.json.
COPY --chown=$SSHUSERNAME:$SSHUSERNAME ./out ${APP_ROOT}

CMD [ "/usr/sbin/sshd", "-D" ]
